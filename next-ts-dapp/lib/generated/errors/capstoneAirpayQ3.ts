/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS } from '../programs';

/** InvoiceExpired: Invoice has expired */
export const CAPSTONE_AIRPAY_Q3_ERROR__INVOICE_EXPIRED = 0x1770; // 6000
/** ItemSoldOut: Soldout */
export const CAPSTONE_AIRPAY_Q3_ERROR__ITEM_SOLD_OUT = 0x1771; // 6001
/** UnderflowError: Arithmetic underflow */
export const CAPSTONE_AIRPAY_Q3_ERROR__UNDERFLOW_ERROR = 0x1772; // 6002
/** OverflowError: Arithmetic overflow */
export const CAPSTONE_AIRPAY_Q3_ERROR__OVERFLOW_ERROR = 0x1773; // 6003

export type CapstoneAirpayQ3Error =
  | typeof CAPSTONE_AIRPAY_Q3_ERROR__INVOICE_EXPIRED
  | typeof CAPSTONE_AIRPAY_Q3_ERROR__ITEM_SOLD_OUT
  | typeof CAPSTONE_AIRPAY_Q3_ERROR__OVERFLOW_ERROR
  | typeof CAPSTONE_AIRPAY_Q3_ERROR__UNDERFLOW_ERROR;

let capstoneAirpayQ3ErrorMessages:
  | Record<CapstoneAirpayQ3Error, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  capstoneAirpayQ3ErrorMessages = {
    [CAPSTONE_AIRPAY_Q3_ERROR__INVOICE_EXPIRED]: `Invoice has expired`,
    [CAPSTONE_AIRPAY_Q3_ERROR__ITEM_SOLD_OUT]: `Soldout`,
    [CAPSTONE_AIRPAY_Q3_ERROR__OVERFLOW_ERROR]: `Arithmetic overflow`,
    [CAPSTONE_AIRPAY_Q3_ERROR__UNDERFLOW_ERROR]: `Arithmetic underflow`,
  };
}

export function getCapstoneAirpayQ3ErrorMessage(
  code: CapstoneAirpayQ3Error
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      capstoneAirpayQ3ErrorMessages as Record<CapstoneAirpayQ3Error, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isCapstoneAirpayQ3Error<
  TProgramErrorCode extends CapstoneAirpayQ3Error,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS,
    code
  );
}

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_INVOICE_ITEM_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  75, 33, 30, 50, 1, 238, 90, 79,
]);

export function getInitializeInvoiceItemAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_INVOICE_ITEM_ACCOUNT_DISCRIMINATOR
  );
}

export type InitializeInvoiceItemAccountInstruction<
  TProgram extends string = typeof CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS,
  TAccountMerchant extends string | AccountMeta<string> = string,
  TAccountInvoiceAccount extends string | AccountMeta<string> = string,
  TAccountInvoiceItemAccount extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMerchant extends string
        ? WritableSignerAccount<TAccountMerchant> &
            AccountSignerMeta<TAccountMerchant>
        : TAccountMerchant,
      TAccountInvoiceAccount extends string
        ? WritableAccount<TAccountInvoiceAccount>
        : TAccountInvoiceAccount,
      TAccountInvoiceItemAccount extends string
        ? WritableAccount<TAccountInvoiceItemAccount>
        : TAccountInvoiceItemAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInvoiceItemAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
  price: bigint;
  expiryTs: bigint;
  items: number;
};

export type InitializeInvoiceItemAccountInstructionDataArgs = {
  seed: number | bigint;
  price: number | bigint;
  expiryTs: number | bigint;
  items: number;
};

export function getInitializeInvoiceItemAccountInstructionDataEncoder(): FixedSizeEncoder<InitializeInvoiceItemAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU64Encoder()],
      ['price', getU64Encoder()],
      ['expiryTs', getU64Encoder()],
      ['items', getU16Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_INVOICE_ITEM_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getInitializeInvoiceItemAccountInstructionDataDecoder(): FixedSizeDecoder<InitializeInvoiceItemAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU64Decoder()],
    ['price', getU64Decoder()],
    ['expiryTs', getU64Decoder()],
    ['items', getU16Decoder()],
  ]);
}

export function getInitializeInvoiceItemAccountInstructionDataCodec(): FixedSizeCodec<
  InitializeInvoiceItemAccountInstructionDataArgs,
  InitializeInvoiceItemAccountInstructionData
> {
  return combineCodec(
    getInitializeInvoiceItemAccountInstructionDataEncoder(),
    getInitializeInvoiceItemAccountInstructionDataDecoder()
  );
}

export type InitializeInvoiceItemAccountInput<
  TAccountMerchant extends string = string,
  TAccountInvoiceAccount extends string = string,
  TAccountInvoiceItemAccount extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** merchant is the creator of this InvoiceItem */
  merchant: TransactionSigner<TAccountMerchant>;
  /** invoice_account created by calling initialize_invoice_account */
  invoiceAccount: Address<TAccountInvoiceAccount>;
  /** The account we aim to create here */
  invoiceItemAccount: Address<TAccountInvoiceItemAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  seed: InitializeInvoiceItemAccountInstructionDataArgs['seed'];
  price: InitializeInvoiceItemAccountInstructionDataArgs['price'];
  expiryTs: InitializeInvoiceItemAccountInstructionDataArgs['expiryTs'];
  items: InitializeInvoiceItemAccountInstructionDataArgs['items'];
};

export function getInitializeInvoiceItemAccountInstruction<
  TAccountMerchant extends string,
  TAccountInvoiceAccount extends string,
  TAccountInvoiceItemAccount extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS,
>(
  input: InitializeInvoiceItemAccountInput<
    TAccountMerchant,
    TAccountInvoiceAccount,
    TAccountInvoiceItemAccount,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInvoiceItemAccountInstruction<
  TProgramAddress,
  TAccountMerchant,
  TAccountInvoiceAccount,
  TAccountInvoiceItemAccount,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    merchant: { value: input.merchant ?? null, isWritable: true },
    invoiceAccount: { value: input.invoiceAccount ?? null, isWritable: true },
    invoiceItemAccount: {
      value: input.invoiceItemAccount ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.merchant),
      getAccountMeta(accounts.invoiceAccount),
      getAccountMeta(accounts.invoiceItemAccount),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeInvoiceItemAccountInstructionDataEncoder().encode(
      args as InitializeInvoiceItemAccountInstructionDataArgs
    ),
  } as InitializeInvoiceItemAccountInstruction<
    TProgramAddress,
    TAccountMerchant,
    TAccountInvoiceAccount,
    TAccountInvoiceItemAccount,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeInvoiceItemAccountInstruction<
  TProgram extends string = typeof CAPSTONE_AIRPAY_Q3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** merchant is the creator of this InvoiceItem */
    merchant: TAccountMetas[0];
    /** invoice_account created by calling initialize_invoice_account */
    invoiceAccount: TAccountMetas[1];
    /** The account we aim to create here */
    invoiceItemAccount: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitializeInvoiceItemAccountInstructionData;
};

export function parseInitializeInvoiceItemAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeInvoiceItemAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      merchant: getNextAccount(),
      invoiceAccount: getNextAccount(),
      invoiceItemAccount: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeInvoiceItemAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}

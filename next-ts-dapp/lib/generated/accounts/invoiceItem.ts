/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const INVOICE_ITEM_DISCRIMINATOR = new Uint8Array([
  250, 1, 124, 216, 139, 151, 119, 92,
]);

export function getInvoiceItemDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INVOICE_ITEM_DISCRIMINATOR
  );
}

export type InvoiceItem = {
  discriminator: ReadonlyUint8Array;
  seed: bigint;
  invoiceAccount: Address;
  price: bigint;
  productId: ReadonlyUint8Array;
  creationTs: bigint;
  expiryTs: bigint;
  remaining: number;
  count: number;
  bump: number;
};

export type InvoiceItemArgs = {
  seed: number | bigint;
  invoiceAccount: Address;
  price: number | bigint;
  productId: ReadonlyUint8Array;
  creationTs: number | bigint;
  expiryTs: number | bigint;
  remaining: number;
  count: number;
  bump: number;
};

export function getInvoiceItemEncoder(): FixedSizeEncoder<InvoiceItemArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU64Encoder()],
      ['invoiceAccount', getAddressEncoder()],
      ['price', getU64Encoder()],
      ['productId', fixEncoderSize(getBytesEncoder(), 32)],
      ['creationTs', getU64Encoder()],
      ['expiryTs', getU64Encoder()],
      ['remaining', getU16Encoder()],
      ['count', getU16Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INVOICE_ITEM_DISCRIMINATOR })
  );
}

export function getInvoiceItemDecoder(): FixedSizeDecoder<InvoiceItem> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU64Decoder()],
    ['invoiceAccount', getAddressDecoder()],
    ['price', getU64Decoder()],
    ['productId', fixDecoderSize(getBytesDecoder(), 32)],
    ['creationTs', getU64Decoder()],
    ['expiryTs', getU64Decoder()],
    ['remaining', getU16Decoder()],
    ['count', getU16Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getInvoiceItemCodec(): FixedSizeCodec<
  InvoiceItemArgs,
  InvoiceItem
> {
  return combineCodec(getInvoiceItemEncoder(), getInvoiceItemDecoder());
}

export function decodeInvoiceItem<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<InvoiceItem, TAddress>;
export function decodeInvoiceItem<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<InvoiceItem, TAddress>;
export function decodeInvoiceItem<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<InvoiceItem, TAddress> | MaybeAccount<InvoiceItem, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getInvoiceItemDecoder()
  );
}

export async function fetchInvoiceItem<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<InvoiceItem, TAddress>> {
  const maybeAccount = await fetchMaybeInvoiceItem(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeInvoiceItem<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<InvoiceItem, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeInvoiceItem(maybeAccount);
}

export async function fetchAllInvoiceItem(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<InvoiceItem>[]> {
  const maybeAccounts = await fetchAllMaybeInvoiceItem(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeInvoiceItem(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<InvoiceItem>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeInvoiceItem(maybeAccount));
}

export function getInvoiceItemSize(): number {
  return 109;
}

/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const PAYMENT_METADATA_DISCRIMINATOR = new Uint8Array([
  42, 140, 14, 77, 159, 203, 253, 80,
]);

export function getPaymentMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PAYMENT_METADATA_DISCRIMINATOR
  );
}

export type PaymentMetadata = {
  discriminator: ReadonlyUint8Array;
  invoiceItemAccount: Address;
  pricePaid: bigint;
  itemSeqNumber: number;
  buyerMetadata: ReadonlyUint8Array;
  bump: number;
};

export type PaymentMetadataArgs = {
  invoiceItemAccount: Address;
  pricePaid: number | bigint;
  itemSeqNumber: number;
  buyerMetadata: ReadonlyUint8Array;
  bump: number;
};

export function getPaymentMetadataEncoder(): FixedSizeEncoder<PaymentMetadataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['invoiceItemAccount', getAddressEncoder()],
      ['pricePaid', getU64Encoder()],
      ['itemSeqNumber', getU16Encoder()],
      ['buyerMetadata', fixEncoderSize(getBytesEncoder(), 32)],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PAYMENT_METADATA_DISCRIMINATOR })
  );
}

export function getPaymentMetadataDecoder(): FixedSizeDecoder<PaymentMetadata> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['invoiceItemAccount', getAddressDecoder()],
    ['pricePaid', getU64Decoder()],
    ['itemSeqNumber', getU16Decoder()],
    ['buyerMetadata', fixDecoderSize(getBytesDecoder(), 32)],
    ['bump', getU8Decoder()],
  ]);
}

export function getPaymentMetadataCodec(): FixedSizeCodec<
  PaymentMetadataArgs,
  PaymentMetadata
> {
  return combineCodec(getPaymentMetadataEncoder(), getPaymentMetadataDecoder());
}

export function decodePaymentMetadata<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PaymentMetadata, TAddress>;
export function decodePaymentMetadata<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PaymentMetadata, TAddress>;
export function decodePaymentMetadata<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<PaymentMetadata, TAddress>
  | MaybeAccount<PaymentMetadata, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPaymentMetadataDecoder()
  );
}

export async function fetchPaymentMetadata<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PaymentMetadata, TAddress>> {
  const maybeAccount = await fetchMaybePaymentMetadata(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePaymentMetadata<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PaymentMetadata, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePaymentMetadata(maybeAccount);
}

export async function fetchAllPaymentMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PaymentMetadata>[]> {
  const maybeAccounts = await fetchAllMaybePaymentMetadata(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePaymentMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PaymentMetadata>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodePaymentMetadata(maybeAccount)
  );
}

export function getPaymentMetadataSize(): number {
  return 83;
}
